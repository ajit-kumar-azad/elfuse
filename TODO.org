* DONE Dynamic module skeleton

  - [X] собрать пробный проект, загрузить модуль

    кстати, есть интересная статья у skeeto: [[http://nullprogram.com/blog/2016/11/05/]]

  - [X] вызвать Сишную функцию из лиспа

  - [X] вызвать лисповую функцию из Си

  - [X] функция убийства OS-level треда

  - [X] функция запуска OS-level треда

    - [X] выставлять переменную о том, что тред запущен

    - [X] просто функция

    - [X] возвращать t или nil

    - [X] точка монитрования в виде полного пути к директории (видимо, здесь
      надо думать, как предварительно обрабатывать путь, чтоб он был валиден)

  - [X] вспомогательная функция message (обертка вокруг максового message)

* DONE pthreads

  - [X] пробный запуск треда

  - [X] убийство треда
*
* TODO libfuse thread

  - [X] выделить отдельный файл для всего, связанного непосредственно с libfuse

  - [X] запустить hello world! из емакса

  - [X] передать правильный путь в поток

  - [X] размонтировать при остановке треда

    сейчас почему-то не размонтируется при pthread_cancel

    более того, при закрытии процесса почему-то на срабатывают обработчики
    сигналов. Особенность работы емакса? Или FUSE не очень любит работать в
    отдельном треде?

  - [X] использовать высокоуровневый пример

  - [X] мьютекс на общение Емакса с тредом FUSE

  - [X] READIR -> READY -> NONE

  - [X] отвечать на коллбек в по таймеру

  - [X] вызвать какую-нибудь заготовленную лисповую функцию для сборки списка файлов в директории

  - [X] возвращать список файлов из функции (Emacs vector -> C array)

  - [X] getattr

  - [X] open

  - [X] read

  - [X] use pthread [[https://computing.llnl.gov/tutorials/pthreads/#ConditionVariables][condition variables]] for better performance

  - [X] обработчики со стороны емакса должны быть функциями отдельными

  - [X] аргументы и результаты должны быть структурами

  - [X] аргументы и результаты в общем union

  - [X] универсальный механизм обмена аргументами и результатами работы запросов между Elfuse и
    Емаксом

  - [X] минимальный коллбеки (асинхронный вызов + имплементация по умолчанию + проверка руками).
    Вероятно, что-то надо будет дополнить или закончить.

    - [X] rename,

    - [X] create,

    - [X] read,

    - [X] open,

    - [X] getattr,

    - [X] write,

    - [X] release (close?),

    - [X] readdir,

    - [X] truncate,

  - [X] переименования функций, методов и модулей

  - [X] just add emacs-module.h to the proj?

  - [X] start the testing instance from the Makefile

  - [ ] неопределенные коллбэки (должны отвечать стандартным кодом ошибки elfuse)

  - [ ] сменить использовать f == NULL на явный флаг (атомик?) для простоты использования

  - [ ] остановка треда должна рапортовать об успехе или проблемах

  - [ ] ошибки монтирования должны рапортоваться в Емакс

  - [ ] вообще, надо аккуратней обрабатывать всякие проблемы (тред упал, что-то не запустилось,
    остановка емакса, освобождение ресурсов)

  - [ ] добавить таймаутов на всякие события

  - [ ] прогнать долгосрочную работу

* TODO Emacs Lisp wrapper

  Это надо будет отдельно продумать как станут ясны возможности предыдущего
  этапа.

  - [ ] красивое размонтирование и остановка elfuse при выходе емакса

  - [ ] тесты со стороны Elisp для Elfuse (ert-runner?)

  - [ ] Вытащить в отдельный файл вспомогательные функции для разработки модулей для
  емакса.

  - [ ] Внести в проект заголовок емаксовый?
