* DONE Dynamic module skeleton

  - [X] собрать пробный проект, загрузить модуль

    кстати, есть интересная статья у skeeto: [[http://nullprogram.com/blog/2016/11/05/]]

  - [X] вызвать Сишную функцию из лиспа

  - [X] вызвать лисповую функцию из Си

  - [X] функция убийства OS-level треда

  - [X] функция запуска OS-level треда

    - [X] выставлять переменную о том, что тред запущен

    - [X] просто функция

    - [X] возвращать t или nil

    - [X] точка монитрования в виде полного пути к директории (видимо, здесь
      надо думать, как предварительно обрабатывать путь, чтоб он был валиден)

  - [X] вспомогательная функция message (обертка вокруг максового message)

* DONE pthreads

  - [X] пробный запуск треда

  - [X] убийство треда
*
* DONE libfuse thread

  - [X] выделить отдельный файл для всего, связанного непосредственно с libfuse

  - [X] запустить hello world! из емакса

  - [X] передать правильный путь в поток

  - [X] размонтировать при остановке треда

    сейчас почему-то не размонтируется при pthread_cancel

    более того, при закрытии процесса почему-то на срабатывают обработчики
    сигналов. Особенность работы емакса? Или FUSE не очень любит работать в
    отдельном треде?

  - [X] использовать высокоуровневый пример

  - [X] мьютекс на общение Емакса с тредом FUSE

  - [X] READIR -> READY -> NONE

  - [X] отвечать на коллбек в по таймеру

  - [X] вызвать какую-нибудь заготовленную лисповую функцию для сборки списка файлов в директории

  - [X] возвращать список файлов из функции (Emacs vector -> C array)

  - [X] getattr

  - [X] open

  - [X] read

  - [X] use pthread [[https://computing.llnl.gov/tutorials/pthreads/#ConditionVariables][condition variables]] for better performance

  - [X] обработчики со стороны емакса должны быть функциями отдельными

  - [X] аргументы и результаты должны быть структурами

  - [X] аргументы и результаты в общем union

  - [X] универсальный механизм обмена аргументами и результатами работы запросов между Elfuse и
    Емаксом

  - [X] минимальный коллбеки (асинхронный вызов + имплементация по умолчанию + проверка руками).
    Вероятно, что-то надо будет дополнить или закончить.

    - [X] rename,

    - [X] create,

    - [X] read,

    - [X] open,

    - [X] getattr,

    - [X] write,

    - [X] release (close?),

    - [X] readdir,

    - [X] truncate,

  - [X] переименования функций, методов и модулей

  - [X] just add emacs-module.h to the proj?

  - [X] start the testing instance from the Makefile

  - [X] неопределенные коллбэки (должны отвечать стандартным кодом ошибки elfuse)

    - [X] новое состояние elfuse_state

    - [X] понять, где и что надо возвращать

      If the operation is not defined, they return -ENOSYS, with the exception of fuse_fs_open,
      fuse_fs_release, fuse_fs_opendir, fuse_fs_releasedir and fuse_fs_statfs, which return 0.

    - [X] Добавить сущность результата вызова функции, чтобы можно было рапортовать адекватно

    - [X] коды возврата точно правильные? или это только fuse?

    - [X] readdir

      -ENOSYS

    - [X] getattr

      -ENOSYS

    - [X] create

      -ENOSYS

    - [X] rename

      -ENOSYS

    - [X] read

      -ENOSYS

    - [X] write

      -ENOSYS

    - [X] truncate

      -ENOSYS

    - [X] open

      0

    - [X] release

      0

  - [X] проверку коллбэков со стороны емакса можно выделить в отдельную функцию

  - [X] similar to elfuse-module, extract response handling code into clean function, not aware of
    various lock-related stuff and error handling

  - [X] в целом, что должны возвращать коллбеки?

    -ENOSYS при неопределенных коллбеках

    -EACCES при ошибке доступа

    что еще? И где это смотреть?

  - [X] сменить использовать f == NULL на явный флаг (атомик?) для простоты использования

  - [X] остановка треда должна рапортовать об успехе или проблемах

  - [X] ошибки монтирования должны рапортоваться в Емакс

  - [X] вообще, надо аккуратней обрабатывать всякие проблемы (тред упал, что-то не запустилось,
    остановка емакса, освобождение ресурсов)

* TODO Emacs Lisp wrapper

  Это надо будет отдельно продумать как станут ясны возможности предыдущего
  этапа.

  - [ ] красивое размонтирование и остановка elfuse при выходе емакса

  - [ ] тесты со стороны Elisp для Elfuse (ert-runner?)

  - [ ] демо-проектик: hello world

  - [ ] демо-проектик: что-то посложнее? org-mode?

  - [ ] более точно возвращать возможные ошибки. Символами возвращать?

  - [ ] Вытащить в отдельный файл вспомогательные функции для разработки модулей для
  емакса.

  - [ ] Внести в проект заголовок емаксовый?

  - [ ] FORTIFY_SOURCE, -fstack-protector, etc
